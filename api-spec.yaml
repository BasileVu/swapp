swagger: '2.0'

info:
  version: "1.0.0"
  title: Swapp API
  description:
    "The swapp API specification. All endpoints are implicitely prefixed by __/api__ for the sake of readability."
    
consumes:
  - application/json
produces:
  - application/json

paths:
  /csrf/:
    get:
      description: "Gets a CSRF token required to use the api's routes. When this route is queried, a **cookie is set**. The token can be found at the key **csrftoken**."
      responses:
        200:
          description: "Successful operation. **Sets a cookie at the key csrftoken.**"

  /login/:
    post:
      description: "Logs an user in."
      parameters:
        - in: body
          name: body
          description: "The credentials of the user."
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
      responses:
        200:
          description: "Successful operation."
        401:
          description: "Invalid username/password combination. \n\r Account not active."
          
  /logout/:
    get:
      description: "Logs an user out."
      responses:
        200:
          description: "Successful operation."
        401:
          description: "User is not authenticated."

  /users/:
    post:
      description: "Creates an user."
      parameters:
        - in: body
          name: body
          description: "The account info of the user."
          required: true
          schema:
            $ref: "#/definitions/UserCreation"
      responses:
        201:
          description: "Successful operation."
          headers:
            Location: 
              description: "Location of the created user."
              type: string
        400:
          description: "Location not existing. \n\r Passwords don't match."
        409:
          description: "An user with the same username already exists."
          
  /users/{username}/:
    get:
      description: "Gets the public account info of the given user."
      parameters:
        - in: path
          name: username
          description: "The username of the target user."
          required: true
          type: string
      responses:
        200:
          description: "Successful operation."
          schema:
            type: object
            properties:
              id:
                type: number
              profile_picture_url:
                type: string
              username:
                type: string
              first_name:
                type: string
              last_name:
                type: string
              location:
                type: string
              items:
                type: array
                items:
                  $ref: "#/definitions/InventoryItem"
              notes:
                type: number
              note_avg:
                type: number
              interested_by:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: number
                    name:
                      type: string
              coordinates:
                $ref: "#/definitions/Coordinates"
          
  /account/:
    get:
      description: "Gets the account info of the current user logged in."
      responses:
        200:
          description: "Successful operation."
          schema:
            type: object
            properties:
              id: 
                type: number
              profile_picture_url:
                type: string
              username:
                type: string
              first_name:
                type: string
              last_name:
                type: string
              email:
                type: string
              location:
                $ref: "#/definitions/Location"
              last_modification_date:
                type: string
              categories:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: number
                    name:
                      type: string
              notes:
                type: number
              note_avg:
                type: number
              coordinates:
                $ref: "#/definitions/Coordinates"
              pending_offers:
                type: array
                items:
                  $ref: "#/definitions/OfferGet"
                
        401:
          description: "User is not authenticated."
    put:
      description: "Updates all the current user's account info."
      parameters:
        - in: body
          name: body
          description: "The account info to update."
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: "Successful operation."
        401:
          description: "User is not authenticated."
        409:
          description: "An user with the same username already exists."
    patch:
      description: "Partially updates the current user's account info."
      parameters:
        - in: body
          name: body
          description: "The account info to update."
          required: false
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: "Successful response."
        401:
          description: "User is not authenticated."
        409:
          description: "An user with the same username already exists."
          
  /account/password/:
    put:
      description: "Updates the password of the current user logged in."
      parameters:
        - in: body
          name: body
          description: "The account info to update."
          required: true
          schema:
            type: object
            properties:
              old_password:
                type: string
              new_password:
                type: string
      responses:
        200:
          description: "Successful operation."
        400:
          description: "Passwords not matching."
    
  /account/location/:
    put:
      description: "Updates the location of the current user logged in."
      parameters:
        - in: body
          name: body
          description: "The account info to update."
          required: true
          schema:
            $ref: "#/definitions/Location"
      responses:
        200:
          description: "Successful operation."
        400:
          description: "Location not existing."
        401:
          description: "User not authenticated."
      
    patch:
      description: "Partially updates the location of the current user logged in."
      parameters:
      - in: body
        name: body
        description: "The account info to update."
        required: false
        schema:
          $ref: "#/definitions/Location"
      responses:
        200:
          description: "Successful operation."
        400:
          description: "Location not existing."
        401:
          description: "User not authenticated."
          
  /account/categories/:
    put:
      description: "Updates the interested by categories of the current user logged in."
      parameters:
        - in: body
          name: body
          description: "The interested by categories to update."
          required: true
          schema:
            $ref: "#/definitions/InterestedBy"
      responses:
        200:
          description: "Successful operation."
        401:
          description: "User not authenticated."
      
    patch:
      description: "Updates the interested by categories of the current user logged in."
      parameters:
      - in: body
        name: body
        description: "The interested by categories to update."
        required: false
        schema:
          $ref: "#/definitions/InterestedBy"
      responses:
        200:
          description: "Successful operation."
        401:
          description: "User not authenticated."
          
  /account/image/:
    post:
      description: "Creates a new image for the user profile. The encoding must be **multipart/form-data**."
      parameters:
      - in: formData
        name: image
        description: "The image to upload."
        required: true
        type: file
      responses:
        201:
          description: "Successful operation."
          headers:
            Location: 
              description: "Location of the created image (url)."
              type: string
        401:
          description: "User not authenticated."
          
  /notes/:
    post:
      description: "Creates a new note."
      parameters:
      - in: body
        name: body
        description: "The content of the note."
        required: true
        schema:
          type: object
          properties:
            offer:
              type: number
            text:
              type: string
            note:
              type: number
      responses:
        201:
          description: "Successful operation."
          schema:
            $ref: "#/definitions/Note"
        400:
          description: "The related offer has not been accepted. \n\r The user is not linked to the related offer. \n\r The user has already noted the related offer."
        401:
          description: "User not authenticated."
          
  /notes/{id}/:
    get:
      description: "Gets the info of the specified note."
      parameters:
      - in: path
        name: id
        description: "The id of the note."
        required: true
        type: number
      responses:
        200:
          description: "Successful operation."
          schema:
            $ref: "#/definitions/Note"
        401:
          description: "User not authenticated."
            
    put:
      description: "Updates the info of the specified note."
      parameters:
        - in: path
          name: id
          description: "The id of the note."
          required: true
          type: number
        - in: body
          name: body
          description: "The content of the note."
          required: true
          schema:
            type: object
            properties:
              text:
                type: string
              note:
                type: number
      responses:
        200:
          description: "Successful operation."
        401:
          description: "User not authenticated."
              
    patch:
      description: "Partially updates the info of the given note."
      parameters:
        - in: path
          name: id
          description: "The id of the note."
          required: true
          type: number
        - in: body
          name: body
          description: "The content of the note."
          required: false
          schema:
            type: object
            properties:
              text:
                type: string
              note:
                type: number
      responses:
        200:
          description: "Successful operation."
        401:
          description: "User not authenticated."
          
    delete:
      description: "Deletes the specified note."
      parameters:
        - in: path
          name: id
          description: "The id of the note."
          required: true
          type: number
      responses:
        204:
          description: "Successful operation."
        401:
          description: "User not authenticated."
          
  /categories/:
    get:
      description: "Gets all the categories."
      responses:
        200:
          description: "Successful operation."
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: number
                name:
                  type: string
          
  /categories/{id}/:
    get:
      description: "Gets a detailed category."
      parameters:
        - in: path
          name: id
          description: "The id of the category."
          required: true
          type: number
      responses:
        200:
          description: "Successful operation."
          schema:
              type: object
              properties:
                id:
                  type: number
                name:
                  type: string
                  
  /deliverymethods/:
    get:
      description: "Gets all the delivery methods."
      responses:
        200:
          description: "Successful operation."
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: number
                name:
                  type: string
          
  /deliverymethods/{id}/:
    get:
      description: "Gets a detailed delivery method."
      parameters:
        - in: path
          name: id
          description: "The id of the delivery method."
          required: true
          type: number
      responses:
        200:
          description: "Successful operation."
          schema:
              type: object
              properties:
                id:
                  type: number
                name:
                  type: string
          
  /items/:
    get:
      description: "Gets unarchived items according to the specified filters. If no parameter are given, items that the current user could find interresting will be returned."
      parameters:
        - in: query
          name: q
          description: "Query of user."
          required: false
          type: string
        - in: query
          name: category
          description: "Category of item wanted."
          required: false
          type: string
        - in: query
          name: lat
          description: "Latitude of current point from where to search."
          required: false
          type: number
        - in: query
          name: lon
          description: "Longitude of current point from where to search."
          required: false
          type: number
        - in: query
          name: radius
          description: "Radius (in kilometers) in which items must be to appear in the result."
          required: false
          type: number
        - in: query
          name: price_min
          description: "Lower bound of an item's price range that must be respected in order for an item to appear in the result."
          required: false
          type: number
        - in: query
          name: price_max
          description: "Upper bound of an item's price range that must be respected in order for an item to appear in the result."
          required: false
          type: number
        - in: query
          name: order_by
          description: "Define the sorting in the result."
          required: false
          type: string
      responses:
        200:
          description: "Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/DetailedItemInfo"
              
    post:
      description: "Creates a new item."
      parameters:
        - in: body
          name: body
          description: "The content of the item."
          required: true
          schema:
            $ref: "#/definitions/SetItemInfo"
      responses:
        201:
          description: "Successful operation."
          schema:
            type: object
            properties:
              id:
                type: number
              name: 
                type: string
              description:
                type: string
              price_min:
                type: number
              price_max:
                type: number
              category:
                type: number
              keyinfo_set:
                type: array
                items:
                  $ref: "#/definitions/KeyInfo"
              delivery_methods:
                type: array
                items:
                  type: number
        400:
          description: "Price min is negative. \n\r Price max is negative. \n\r Price min is higher than price max. \n\r One delivery method should be specified."
        401:
          description: "User not authenticated."
          
  /items/{id}/:
    get:
      description: "Gets a detailed item."
      parameters:
        - in: path
          name: id
          description: "The id of the item."
          required: true
          type: number
      responses:
        200:
          description: "Successful operation."
          schema:
            $ref: "#/definitions/DetailedItemInfo"
            
    put:
      description: "Updates the info of the given item."
      parameters:
        - in: path
          name: id
          description: "The id of the item."
          required: true
          type: number
        - in: body
          name: body
          description: "The content of the item."
          required: true
          schema:
            $ref: "#/definitions/SetItemInfo"
      responses:
        200:
          description: "Successful operation."
        400:
          description: "Can't update a traded item. \n\r Can't update an archived item. \n\r Can't update an item with pending offers. \n\r Price min is negative. \n\r Price max is negative. \n\r Price min is higher than price max. \n\r One delivery method should be specified."
        401:
          description: "User not authenticated."
              
    patch:
      description: "Partially updates the info of the given item."
      parameters:
        - in: path
          name: id
          description: "The id of the item."
          required: true
          type: number
        - in: body
          name: body
          description: "The content of the item."
          required: false
          schema:
            $ref: "#/definitions/SetItemInfo"
      responses:
        200:
          description: "Successful operation."
        400:
          description: "Can't update a traded item. \n\r Can't update an archived item. \n\r Can't update an item with pending offers. \n\r Price min is negative. \n\r Price max is negative. \n\r Price min is higher than price max. \n\r One delivery method should be specified."
        401:
          description: "User not authenticated."
            
  /items/{id}/comments/:
    get:
      description: "Gets all comments of an item."
      parameters:
        - in: path
          name: id
          description: "The id of the item."
          required: true
          type: number
      responses:
        200:
          description: "Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/CommentGet"
                  
  /items/{id}/archive/:
    post:
      description: "Archives a specified item."
      parameters:
        - in: path
          name: id
          description: "The id of the item."
          required: true
          type: number
      responses:
        200:
          description: "Successful operation."
        400:
          description: "The item has pending offers"
        401:
          description: "User not authenticated."
          
  /items/{id}/restore/:
    post:
      description: "Restores a specified item."
      parameters:
        - in: path
          name: id
          description: "The id of the item."
          required: true
          type: number
      responses:
        200:
          description: "Successful operation."
        401:
          description: "User not authenticated."
          
  /items/{id}/images/:
    post:
      description: "Creates a new image for an item. The encoding must be **multipart/form-data**."
      parameters:
      - in: path
        name: id
        description: "The id of the item."
        required: true
        type: number
      - in: formData
        name: image
        description: "The image to upload."
        required: true
        type: file
      responses:
        201:
          description: "Successful operation."
          headers:
            Location: 
              description: "Location of the created image (url)."
              type: string
        401:
          description: "User not authenticated."
                  
  /comments/:
    post:
      description: "Creates a new comment."
      parameters:
      - in: body
        name: body
        description: "The content of the comment."
        required: true
        schema:
          $ref: "#/definitions/Comment"
      responses:
        201:
          description: "Successful operation."
          schema:
            $ref: "#/definitions/CommentGet"
        401:
          description: "User not authenticated."
          
    get:
      description: "Gets all the comments for the current user, sorted by date (recent first)."
      responses:
        200:
          description: "Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/CommentGet"
        401:
          description: "User not authenticated."
          
  /comments/{id}/:
    get:
      description: "Gets the info of the specified comment."
      parameters:
      - in: path
        name: id
        description: "The id of the comment."
        required: true
        type: number
      responses:
        200:
          description: "Successful operation."
          schema:
            $ref: "#/definitions/CommentGet"
        401:
          description: "User not authenticated."
          
    put:
      description: "Updates the info of the given comment."
      parameters:
        - in: path
          name: id
          description: "The id of the comment."
          required: true
          type: number
        - in: body
          name: body
          description: "The content of the comment."
          required: true
          schema:
            $ref: "#/definitions/Comment"
      responses:
        200:
          description: "Successful operation."
        401:
          description: "User not authenticated."
          
    patch:
      description: "Partially updates the info of the given comment."
      parameters:
        - in: path
          name: id
          description: "The id of the comment."
          required: true
          type: number
        - in: body
          name: body
          description: "The content of the comment."
          required: false
          schema:
            $ref: "#/definitions/Comment"
      responses:
        200:
          description: "Successful operation."
        401:
          description: "User not authenticated."
          
    delete:
      description: "Deletes the specified comment."
      parameters:
        - in: path
          name: id
          description: "The id of the comment."
          required: true
          type: number
      responses:
        204:
          description: "Successful operation."
        401:
          description: "User not authenticated."      
          
  /notifications/:
    get:
      description: "Gets all the notifications for the current user, sorted by date (recent first)."
      responses:
        200:
          description: "Successful operation."
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: number
                content:
                  type: string
                read:
                  type: boolean
                date:
                  type: string
        401:
          description: "User not authenticated."
          
  /notifications/{id}/:
    put:
      description: "Sets a notification as read or not."
      parameters:
        - in: path
          name: id
          description: "The id of the notification."
          required: true
          type: number
        - in: body
          name: body
          description: "The content of the notification."
          required: true
          schema:
            $ref: "#/definitions/Notification"
      responses:
        200:
          description: "Successful operation."
        401:
          description: "User not authenticated."
  
    patch:
      description: "Sets a notification as read or not."
      parameters:
      - in: path
        name: id
        description: "The id of the notification."
        required: true
        type: number
      - in: body
        name: body
        description: "The content of the notification."
        required: false
        schema:
          $ref: "#/definitions/Notification"
      responses:
        200:
          description: "Successful operation."
        401:
          description: "User not authenticated."
          
  /images/{id}/:
    delete:
      description: "Deletes the specified image (associated with an item)."
      parameters:
        - in: path
          name: id
          description: "The id of the image."
          required: true
          type: number
      responses:
        204:
          description: "Successful operation."
        401:
          description: "User not authenticated."
          
  /offers/:
    post:
      description: "Creates a new offer."
      parameters:
      - in: body
        name: body
        description: "The content of the offer."
        required: true
        schema:
          $ref: "#/definitions/Offer"
      responses:
        201:
          description: "Successful operation."
          schema:
            type: object
            properties:
              id:
                type: number
              comment:
                type: string
              item_given:
                type: number
              item_received:
                type: number
        400:
          description: "The user has already created an offer with the same item for the wanted item. \n\r There is already an offer for the given item with the wanted item. \n\r Can't create an offer with an item that has been traded. \n\r Can't create an offer for an item that has been traded. \n\r The item traded does not exist. \n\r The item wanted does not exist. \n\r Can't trade another person's item. \n\r Can't traded for the own user item. \n\r Price max of the given item is smaller than price min of the wanted item."
        401:
          description: "User not authenticated."
          
  /offers/{id}/:
    get:
      description: "Gets the info of the specified offer."
      parameters:
      - in: path
        name: id
        description: "The id of the offer."
        required: true
        type: number
      responses:
        200:
          description: "Successful operation."
          schema:
            $ref: "#/definitions/OfferGet"
        401:
          description: "User not authenticated."
          
    put:
      description: "Updates the info of the given offer."
      parameters:
        - in: path
          name: id
          description: "The id of the offer."
          required: true
          type: number
        - in: body
          name: body
          description: "The content of the offer."
          required: true
          schema:
            $ref: "#/definitions/OfferUpdate"
      responses:
        200:
          description: "Successful operation."
        400:
          description: "Can't update an accepted offer. \n\r Can't accept or refuse the own user offer. "
        401:
          description: "User not authenticated."
              
    patch:
      description: "Partially updates the info of the given offer."
      parameters:
        - in: path
          name: id
          description: "The id of the offer."
          required: true
          type: number
        - in: body
          name: body
          description: "The content of the offer."
          required: false
          schema:
            $ref: "#/definitions/OfferUpdate"
      responses:
        200:
          description: "Successful operation."
        400:
          description: "Can't update an accepted offer. \n\r Can't accept or refuse the own user offer. "
        401:
          description: "User not authenticated."
          
    delete:
      description: "Deletes the specified offer."
      parameters:
        - in: path
          name: id
          description: "The id of the offer."
          required: true
          type: number
      responses:
        204:
          description: "Successful operation."
        400:
          description: "Can't delete offer of another user. \n\r Can't delete an accepted offer."
        401:
          description: "User not authenticated."
          
  /likes/:
    get:
      description: "Gets all the likes of the current user, sorted by date (recent first)."
      responses:
        200:
          description: "Successful operation."
          schema:
            type: array
            items:
              $ref: "#/definitions/Like"
        401:
          description: "User not authenticated."
    
    post:
      description: "Creates a new like on an item by the current user."
      parameters:
        - in: body
          name: body
          description: "The data required to create the like."
          required: true
          schema:
            $ref: "#/definitions/LikeCreation"
      responses:
        201:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Like"
        400:
          description: "Specified item owned by the user. \n\r Specified item already liked."
        401:
          description: "User not authenticated."
      
  /likes/{id}/:
    get:
      description: "Get the info of the specified like."
      parameters:
        - in: path
          name: id
          description: "The id of the like."
          required: true
          type: number
      responses:
        200:
          description: "Successful operation."
          schema:
            $ref: "#/definitions/Like"
        401:
          description: "User not authenticated."
          
    delete:
      description: "Deletes the specified like."
      parameters:
        - in: path
          name: id
          description: "The id of the like."
          required: true
          type: number
      responses:
        204:
          description: "Successful operation."
        401:
          description: "User not authenticated."
          
               
definitions:
  Coordinates:
    type: object
    properties:
      latitude:
        type: number
      longitude:
        type: number

  UserCreation:
    type: object
    properties:
      username:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      email:
        type: string
      password:
        type: string
      password_confirmation:
        type: string
      street:
        type: string
      city:
        type: string
      region:
        type: string
      country:
        type: string
        
  User:
    type: object
    properties:
      username:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      email:
        type: string

  Location:
    type: object
    properties:
      street:
        type: string
      city:
        type: string
      region:
        type: string
      country:
        type: string
        
  Note:
    type: object
    properties:
      id:
        type: number
      user:
        type: number
      offer:
        type: number
      text:
        type: string
      note:
        type: number
        
  CommentGet:
    type: object
    properties:
      id:
        type: number
      content:
        type: string
      date:
        type: string
      user:
        type: number
      username:
        type: string
      item:
        type: number
      user_fullname:
        type: string
      user_profile_picture:
        type: string
        
  Comment:
    type: object
    properties:
      content:
        type: string
      item:
        type: number
        
  Offer:
    type: object
    properties:
      comment:
        type: string
      item_given:
        type: number
      item_received:
        type: number
        
  OfferGet:
    type: object
    properties:
      id:
        type: number
      accepted:
        type: boolean
      answered:
        type: boolean
      comment:
        type: string
      item_given:
        type: number
      item_received:
        type: number
        
  OfferUpdate:
    type: object
    properties:
      accepted:
        type: boolean
      comment:
        type: string
        
  LikeCreation:
    type: object
    properties:
      item:
        type: number
        
  Like:
    properties:
      id:
        type: number
      user:
        type: number
      item:
        type: number
      date:
        type: string
        
  Notification:
    type: object
    properties:
      read:
        type: boolean
        
  InterestedBy:
    type: object
    properties:
      interested_by:
        type: array
        items:
          type: number
        
  KeyInfo:
    properties:
      key:
        type: string
      info:
        type: string

  SetItemInfo:
    type: object
    properties:
      name: 
        type: string
      description:
        type: string
      price_min:
        type: number
      price_max:
        type: number
      category:
        type: number
      keyinfo_set:
        type: array
        items:
          $ref: "#/definitions/KeyInfo"
      delivery_methods:
        type: array
        items:
          type: number
  
  InventoryItem:    
    type: object
    properties:
      id:
        type: number
      image_id:
        type: number
      image_url:
        type: string
      name:
        type: string
      archived:
        type: boolean
        
  DetailedItemInfo:
    type: object
    properties:
      id:
        type: number
      name:
        type: string
      description:
        type: string
      price_min:
        type: number
      price_max:
        type: number
      creation_date:
        type: string
      keyinfo_set:
        type: array
        items:
          $ref: "#/definitions/KeyInfo"
      delivery_methods:
        type: array
        items:
          type: object
          properties:
            id:
              type: number
            name:
              type: string
      category:
        type: object
        properties:
          id:
            type: number
          name:
            type: string
      views:
        type: number
      images:
        type: array
        items:
          type: object
          properties:
            id:
              type: number
            url:
              type: string
      liked:
        type: boolean
      likes:
        type: number
      comments:
        type: number
      offers_received:
        type: number
      similar:
        type: array
        items:
          $ref: "#/definitions/InventoryItem"
      owner_username:
        type: string
      owner_picture_url:
        type: string
      owner_location:
        type: string
      owner_coordinates:
        $ref: "#/definitions/Coordinates"
      traded:
        type: boolean
      archived:
        type: boolean
